= Billing Logic
- BillingAccount
- Product
- Subscription

== Structure

    module BillingLogic
      module CommandBuilders
        autoload :BuilderHelpers, 'billing_logic/command_builders/command_builders'
        autoload :BasicBuilder, 'billing_logic/command_builders/command_builders'
        autoload :WordBuilder , 'billing_logic/command_builders/command_builders'
        autoload :AggregateWordBuilder, 'billing_logic/command_builders/command_builders'
        autoload :ActionObject,         'billing_logic/command_builders/command_builders'
        autoload :SINGLE_PRODUCT_REGEX, 'billing_logic/command_builders/command_builders'

      end
      module Strategies
        autoload :BaseStrategy              , 'billing_logic/strategies/base_strategy'
        autoload :IndependentPaymentStrategy, 'billing_logic/strategies/independent_payment_strategy'
        autoload :SinglePaymentStrategy     , 'billing_logic/strategies/single_payment_strategy'
      end
    end

== BillingLogic::Strategies

    strategy = <strategy class>.new(:payment_command_builder_class => <your builder class>,
    				:current_state => <an array of payment profiles>
    				:desired_state => <an array of products>)
    
    strategy.command_list => An Array of commands provided by the command builder class

There are three strategies available:
- BaseStrategy:
  - Contains most of the methods
- IndependentPaymentStrategy:
  - Each product gets its own PaymentProfile
  - Default payment_command_builder_class: BillingLogic::CommandBuilders::WordBuilder
- SinglePaymentStrategy:
  - All products share a single PaymentProfile
  - Default payment_command_builder_class: BillingLogic::CommandBuilders::AggregateWordBuilder

BaseStrategy public methods:
- command_list
- current_state=(subscriptions)
- products_to_be_added
- products_to_be_added_grouped_by_date
- products_to_be_removed
- current_products

== BillingLogic::BillingCycle
constants:
  TIME_UNITS = { :day => 1, :week => 7, :month => 365/12.0, :semimonth=> 365/24, :year => 365 }

fields:
  :frequency (1, 45)
  :period (:day, :week, :semimonth, :month, :year)
  :anniversary

methods:
  days_in_billing_cycle_including(date)
  next_payment_date
  closest_anniversary_date_including(date)
  periodicity ( TIME_UNITS[self.period] * frequency )

== BillingLogic::PaymentCommandBuilder

methods:
  group_products_by_billing_cycle

class methods:
  create_recurring_payment_commands
  cancel_recurring_payment_commands

# == Subscription
# fields:
#   balance
#   plan_id
#   price
#   status
#   trial_duration
#   trial_duration_unit
#   trial_period
# 
# Class methods
#   new
#   create
#   update
#   cancel
#   find
# 
# 
# subscription = Subscription#new or Subscription#create
# subscription.renew
# subscription.cancel
# subscription.activate!
# subscription.deactivate!
# subscription.status #=> pending, active, expired, cancelled, past_due
# subscription.balance
# 
# Subscription.cancel(id)
# 
# == Product
# product = Product.new
# product.amount = 19.00
# 
# == Plan
# fields:
#   plan id
#   plan name
#   description
#   trial period => true/false
#   billing day of month
#   number of billing cycles
#   amount
#   currency
#   billing cycle
# 
# 
# == Addons/Discounts
# id
# name
# descripion
# amount
# duration
# number_of_billing_cycles
# quantity
# never_expires
# 
# == 
# 
# 
# 
# 
